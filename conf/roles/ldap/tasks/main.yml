---
- name: Gather OS specific variables
  ansible.builtin.include_vars:
    file: "os/{{ ansible_facts.os_family | lower }}.yml"

- name: Gather the package facts
  ansible.builtin.package_facts: {}

- name: Include OS specific pre-installation tasks
  ansible.builtin.include_tasks: "os/{{ ansible_facts.os_family | lower }}.yml"
  vars:
    ldap_phase: pre_install

- name: Install LDAP packages
  ansible.builtin.package:
    name: "{{ ldap_packages }}"
    state: latest
  register: ldap_packages_installation

- name: Ensure LDAP service is started and enabled
  ansible.builtin.service:
    name: slapd
    state: started
    enabled: yes

- name: Include OS specific post-installation tasks
  ansible.builtin.include_tasks: "os/{{ ansible_facts.os_family | lower }}.yml"
  vars:
    ldap_phase: post_install

- name: Create LDAP SSL directory
  ansible.builtin.file:
    path: "{{ ldap_tls_dir }}"
    state: directory
    recurse: true

- name: Deploy CA certificate
  ansible.builtin.copy:
    src: "{{ ldap_local_ca_cert_file }}"
    dest: "{{ ldap_tls_ca_cert_file }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: 0644

- name: Deploy LDAP TLS certificate
  ansible.builtin.copy:
    src: "{{ ldap_local_tls_cert_file }}"
    dest: "{{ ldap_tls_cert_file }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: 0644

- name: Deploy LDAP TLS key
  ansible.builtin.copy:
    src: "{{ ldap_local_tls_key_file }}"
    dest: "{{ ldap_tls_key_file }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: 0600

- name: Configure TLS certificate and key
  community.general.ldap_attrs:
    dn: cn=config
    attributes:
      olcTLSCACertificateFile: "{{ ldap_tls_ca_cert_file }}"
      olcTLSCertificateFile: "{{ ldap_tls_cert_file }}"
      olcTLSCertificateKeyFile: "{{ ldap_tls_key_file }}"
    state: exact
  when: ldap_server_package not in ansible_facts.packages

- name: Generate bootstrap LDIF
  ansible.builtin.template:
    src: bootstrap.ldif.j2
    dest: "{{ ldap_ldif_path }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: '0600'
  when: ldap_packages_installation is changed

- name: Insert boostrap LDIF in LDAP directory
  become: true
  become_method: su
  # shell of ldap system user is disabled, flag is used to force real shell
  become_flags: '-s /bin/sh'
  become_user: "{{ ldap_system_user }}"
  ansible.builtin.command:
    cmd: "/usr/sbin/slapadd -v -l {{ ldap_ldif_path }}"
  when: ldap_packages_installation is changed
