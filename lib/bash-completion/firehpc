# firehpc(1) completion
# -*- shell-script -*-
#
# Copyright (c) 2024-2025 Rackslab
#
# This file is part of FireHPC.
#
# SPDX-License-Identifier: GPL-3.0-or-later

__contains_word() {
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
}

__firehpc_clusters_list() {
    ls ~/.local/state/firehpc/
}

__firehpc_os_list() {
    grep https /usr/share/firehpc/images.yml | cut -d: -f1
}

_firehpc_global() {
    local cur=$1 prev=$2 comps; shift; shift;
    local verbs=$@
    local -A OPTS=(
        [STANDALONE]='-v --version --debug --show-libs-logs'
        [FILE]='--state'
    )
    if __contains_word "$prev" ${OPTS[FILE]}; then
        _filedir -d
    elif [[ $cur = -* ]]; then
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]} ${verbs}' -- "$cur") )
    fi
    return 0
}

_firehpc_clean() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [CLUSTER]='--cluster'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_conf() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [STANDALONE]='--with-bootstrap --slurm-emulator'
        [CLUSTER]='--cluster'
        [DIR]='-c --custom'
        [FILE]='--db --schema'
        [ARG]='--tags --ansible-opts'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    elif __contains_word "$prev" ${OPTS[FILE]}; then
        _filedir
    elif __contains_word "$prev" ${OPTS[DIR]}; then
        _filedir -d
    elif ! __contains_word "$prev" ${OPTS[ARG]}; then
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_restore() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [STANDALONE]='--slurm-emulator'
        [CLUSTER]='--cluster'
        [DIR]='-c --custom'
        [FILE]='--db --schema'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    elif __contains_word "$prev" ${OPTS[FILE]}; then
        _filedir
    elif __contains_word "$prev" ${OPTS[DIR]}; then
        _filedir -d
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_deploy() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [STANDALONE]='--slurm-emulator'
        [CLUSTER]='--cluster --users'
        [OS]='--os'
        [DIR]='-c --custom'
        [FILE]='--db --schema'
        [ARG]='--ansible-opts'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    elif __contains_word "$prev" ${OPTS[OS]}; then
        comps=$( __firehpc_os_list )
        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
    elif __contains_word "$prev" ${OPTS[FILE]}; then
        _filedir
    elif __contains_word "$prev" ${OPTS[DIR]}; then
        _filedir -d
    elif ! __contains_word "$prev" ${OPTS[ARG]}; then
       COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_ssh() {
    local cur=$1 prev=$2 comps
    comps=$( __firehpc_clusters_list )
    COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    return 0
}

_firehpc_load() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [ARG]='--time-off-factor'
    )
    if ! __contains_word "$prev" ${OPTS[ARG]}; then
        comps="$( __firehpc_clusters_list ) ${OPTS[*]}"
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    fi
    return 0
}

_firehpc_start_stop() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [CLUSTER]='--cluster'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_status() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [STANDALONE]='--json'
        [CLUSTER]='--cluster'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc_update() {
    local cur=$1 prev=$2 comps
    local -A OPTS=(
        [STANDALONE]='--slurm-emulator'
        [CLUSTER]='--cluster'
        [DIR]='-c --custom'
        [FILE]='--db --schema'
    )
    if __contains_word "$prev" ${OPTS[CLUSTER]}; then
        comps=$( __firehpc_clusters_list )
        COMPREPLY=( $(compgen -o filenames -W '$comps' -- "$cur") )
    elif __contains_word "$prev" ${OPTS[FILE]}; then
        _filedir
    elif __contains_word "$prev" ${OPTS[DIR]}; then
        _filedir -d
    else
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
    fi
    return 0
}

_firehpc() {
    local cur prev opts
    local i verb comps

    local VERBS='bootstrap clean conf deploy images list load restore ssh start status stop update'

    _init_completion || return

    # Find the verb in the command
    for ((i=0; i <= COMP_CWORD; i++)); do
        if __contains_word "${COMP_WORDS[i]}" ${VERBS}; then
            verb=${COMP_WORDS[i]}
            break
        fi
    done

    case $verb in
        clean)
            _firehpc_clean "$cur" "$prev"
            return
            ;;
        conf)
            _firehpc_conf "$cur" "$prev"
            return
            ;;
        deploy)
            _firehpc_deploy "$cur" "$prev"
            return
            ;;
        bootstrap|images|list)
            # Nothing to suggest for these verbs
            return
            ;;
        ssh)
            _firehpc_ssh "$cur" "$prev"
            return
            ;;
        load)
            _firehpc_load "$cur" "$prev"
            return
            ;;
        restore)
            _firehpc_restore "$cur" "$prev"
            return
            ;;
        start|stop)
            _firehpc_start_stop "$cur" "$prev"
            return
            ;;
        status)
            _firehpc_status "$cur" "$prev"
            return
            ;;
        update)
            _firehpc_update "$cur" "$prev"
            return
            ;;
        *)
            _firehpc_global "$cur" "$prev" $VERBS
            return
            ;;
    esac
}

complete -F _firehpc firehpc
